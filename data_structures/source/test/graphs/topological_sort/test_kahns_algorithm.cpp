//
// Created by andreas on 28.12.24.
//
#include "graphs/topological_sort/kahns_algorithm.h"
#include "gtest/gtest.h"


class SetupTopologicalSortTesting : public testing::Test
{
public:
    SetupTopologicalSortTesting() = default;

protected:
    template <typename NodeType>
    void verify_topological_order(const DirectedGraph<NodeType>& graph, std::vector<NodeType>& order)
    {
        std::unordered_map<NodeType, int> position;
        for (int i{}; i < order.size(); ++i)
        {
            position[order[i]] = i;
        }

        EXPECT_EQ(order.size(), graph.get_all_nodes().size());
        auto nodes = graph.get_all_nodes();
        for (const auto node : nodes)
        {
            for (const auto neighbor : graph.get_neighbors(node))
            {
                EXPECT_TRUE(position[node] < position[neighbor]);
            }
        }
    }
};


TEST_F(SetupTopologicalSortTesting, simple1)
{
    DirectedGraph<int> digraph{
        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {
            {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7},
            {1, 8}, {1, 9}, {1, 10}, {2, 3}, {2, 4},
            {2, 9}, {2, 10}, {3, 4}, {3, 6}, {3, 8},
            {3, 9}, {3, 10}, {4, 5}, {4, 6}, {4, 7},
            {4, 8}, {4, 9}, {5, 6}, {5, 7}, {5, 8},
            {5, 9}, {6, 7}, {6, 8}, {6, 9}, {6, 10},
            {7, 8}, {7, 10}, {8, 9}
        }
    };
    std::vector<int> expected_result{1, 2, 3, 4, 5, 6, 7, 10, 8, 9};
    auto computed_order = kahns_algorithm(digraph);
    EXPECT_EQ(kahns_algorithm(digraph), expected_result);
    verify_topological_order(digraph, computed_order);
}

TEST_F(SetupTopologicalSortTesting, simple2)
{
    DirectedGraph<int> digraph{
        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {
            {1, 3}, {1, 5}, {1, 7}, {1, 9}, {1, 11}, {1, 15}, {1, 18}, {2, 3}, {
                2, 6
            },
            {2, 7}, {2, 9}, {2, 11}, {2, 12}, {2, 13}, {2, 14}, {2, 17}, {
                2, 20
            },
            {3, 5}, {3, 8}, {3, 9}, {3, 17}, {3, 19}, {4, 5}, {4, 9}, {
                4, 10
            },
            {4, 11}, {4, 16}, {4, 20}, {5, 7}, {5, 10}, {5, 11}, {
                5, 16
            },
            {6, 8}, {6, 12}, {7, 8}, {7, 9}, {7, 13}, {7, 14}, {7, 15}, {
                7, 16
            },
            {7, 17}, {8, 9}, {8, 10}, {8, 14}, {8, 15}, {8, 20}, {
                9, 10
            },
            {9, 12}, {9, 18}, {11, 12}, {11, 13}, {11, 14}, {11, 16}, {
                11, 17
            },
            {11, 19}, {11, 20}, {12, 13}, {12, 15}, {12, 16}, {12, 17}, {
                12, 19
            },
            {13, 16}, {13, 20}, {14, 20}, {15, 18}, {16, 19}
        }
    };
    auto computed_order = kahns_algorithm(digraph);
    verify_topological_order(digraph, computed_order);
}


TEST_F(SetupTopologicalSortTesting, medium1)
{
    DirectedGraph<int> digraph{
        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30},
        {
            {1, 2}, {1, 5}, {1, 6}, {1, 8}, {1, 11}, {1, 13}, {1, 14}, {1, 15}, {1, 18}, {1, 20}, {1, 22}, {1, 23},
            {1, 25}, {1, 29}, {1, 30}, {2, 3}, {\
                2, 4
            },
            {2, 5}, {2, 6}, {2, 7}, {2, 10}, {2, 11}, {2, 14}, {2, 15}, {2, 17}, {2, 20}, {2, 21}, {2, 22}, {2, 24},
            {2, 27}, {2, 28}, {3, 5}, {\
                3, 11
            },
            {3, 12}, {3, 20}, {3, 22}, {3, 23}, {3, 24}, {3, 25}, {
                3,\
                26
            },
            {3, 27}, {3, 29}, {3, 30}, {4, 6}, {4, 8}, {4, 9}, {4, 11}, {
                4,\
                12
            },
            {4, 14}, {4, 15}, {4, 17}, {4, 18}, {4, 19}, {4, 20}, {4, 22}, {4, 23}, {4, 25}, {4, 27}, {4, 29}, {5, 6},
            {5, 10}, {5, 17}, {5, 22}, {\
                5, 24
            },
            {5, 29}, {6, 8}, {6, 14}, {6, 17}, {6, 18}, {6, 19}, {
                6,\
                22
            },
            {6, 23}, {6, 26}, {6, 28}, {6, 29}, {7, 8}, {7, 10}, {7, 14}, {7, 15}, {7, 16}, {7, 17}, {7, 20}, {7, 22},
            {7, 26}, {7, 29}, {8, 9}, {\
                8, 10
            },
            {8, 11}, {8, 13}, {8, 15}, {8, 20}, {8, 23}, {8, 25}, {
                8,\
                26
            },
            {8, 27}, {8, 29}, {8, 30}, {9, 12}, {9, 13}, {9, 14}, {9, 18}, {9, 19}, {9, 20}, {9, 21}, {9, 22}, {9, 25},
            {9, 26}, {9, 27}, {9, 29}, {\
                9, 30
            },
            {10, 11}, {10, 12}, {10, 13}, {10, 18}, {10, 20}, {10, 23}, {\
                10, 24
            },
            {10, 26}, {10, 28}, {10, 30}, {11, 13}, {11, 15}, {11, 20}, {\
                11, 22
            },
            {11, 23}, {11, 25}, {11, 26}, {11, 27}, {11, 29}, {12, 14}, {\
                12, 15
            },
            {12, 24}, {12, 25}, {12, 30}, {13, 15}, {13, 18}, {13, 19}, {\
                13, 21
            },
            {13, 25}, {13, 28}, {13, 29}, {13, 30}, {14, 16}, {14, 18}, {\
                14, 22
            },
            {14, 25}, {14, 29}, {14, 30}, {15, 17}, {15, 18}, {15, 20}, {\
                15, 25
            },
            {15, 26}, {15, 27}, {15, 28}, {15, 30}, {16, 17}, {16, 19}, {\
                16, 20
            },
            {16, 21}, {16, 22}, {16, 24}, {16, 29}, {17, 19}, {17, 21}, {\
                17, 23
            },
            {17, 25}, {17, 27}, {17, 28}, {17, 30}, {18, 20}, {18, 22}, {\
                18, 23
            },
            {18, 24}, {18, 25}, {18, 27}, {18, 28}, {19, 20}, {19, 21}, {\
                19, 22
            },
            {19, 24}, {19, 25}, {19, 26}, {19, 30}, {20, 21}, {20, 23}, {\
                20, 24
            },
            {20, 26}, {20, 28}, {20, 29}, {20, 30}, {21, 22}, {21, 24}, {\
                21, 26
            },
            {21, 27}, {21, 28}, {21, 30}, {22, 23}, {22, 25}, {22, 27}, {\
                22, 28
            },
            {23, 25}, {23, 27}, {23, 28}, {23, 29}, {24, 28}, {24, 29}, {\
                24, 30
            },
            {25, 26}, {25, 28}, {25, 29}, {27, 28}, {28, 29}, {28, 30}
        }
    };
    auto computed_order = kahns_algorithm(digraph);
    verify_topological_order(digraph, computed_order);
}


