//
// Created by andreas on 02.05.23.
//
#include "gtest/gtest.h"
#include "graphs/minimal_distance_to_connect_all_points.h"

TEST(TestMinimalDistanceToConnectAllPooints, five_points_manhatten_distance)
{
	std::vector<std::vector<int>> input{{0, 0}, {2, 2}, {3, 10}, {5, 2}, {7, 0}};
	int expected_result{20};
	auto result = minimal_costs_to_connect_points<int, std::vector<int>>(input);
	EXPECT_EQ(expected_result, result);
}

TEST(TestMinimalDistanceToConnectAllPooints, three_points_manhatten_distance)
{
	std::vector<std::vector<int>> input{{3, 12}, {-2, 5}, {-4, 1}};
	int expected_result{18};
	auto result = minimal_costs_to_connect_points<int, std::vector<int>>(input);
	EXPECT_EQ(expected_result, result);
}

TEST(TestMinimalDistanceToConnectAllPooints, one_point_manhatten_distance)
{
	std::vector<std::vector<int>> input{{3, 12}};
	int expected_result{0};
	auto result = minimal_costs_to_connect_points<int, std::vector<int>>(input);
	EXPECT_EQ(expected_result, result);
}

TEST(TestMinimalDistanceToConnectAllPooints, eleven_point_manhatten_distance)
{
	std::vector<std::vector<int>> input
		{{5, -17}, {-3, -14}, {-2, 18}, {-14, 15}, {-9, -17}, {9, -16}, {8, -3}, {-15, 11}, {-12, 17}, {6, 6}, {4, 3}};
	int expected_result{94};
	auto result = minimal_costs_to_connect_points<int, std::vector<int>>(input);
	EXPECT_EQ(expected_result, result);
}

TEST(TestMinimalDistanceToConnectAllPooints, manu_manhatten_distance)
{
	std::vector<std::vector<int>> input
		{{75, 790}, {767, 519}, {405, 210}, {-526, -175}, {-126, -824}, {382, 862}, {-832, 630}, {-23, -463},
		 {62, -480}, {371, 724}, {280, -645}, {144, -115}, {-212, -990}, {-856, -393}, {43, -429}, {959, 880},
		 {267, -876}, {-212, 500}, {-699, -240}, {349, -745}, {-558, 92}, {-52, -619}, {269, 282}, {-403, -921},
		 {-848, -406}, {-737, -453}, {335, -521}, {-914, 953}, {-612, -268}, {-133, 238}, {304, -477}, {-312, -565},
		 {-643, -114}, {908, 923}, {946, -296}, {-1000, -464}, {770, 405}, {-491, 543}, {439, 199}, {31, 182},
		 {-362, 790}, {956, 935}, {-913, -368}, {-766, 449}, {-103, 96}, {551, -792}, {-136, 456}, {29, 592},
		 {462, -813}, {859, -832}, {-22, -987}, {-762, 686}, {-483, 281}, {-115, 1000}, {40, -978}, {993, -85},
		 {-516, 662}, {797, -968}, {106, -578}, {-517, 1000}, {535, -696}, {-140, -821}, {-843, 831}, {-918, 704},
		 {-679, 375}, {475, 105}, {-293, 1000}, {-80, 809}, {-600, 783}, {-210, -810}, {260, -234}, {-374, -488},
		 {-640, 820}, {-717, 23}, {-729, -282}, {534, -752}, {-775, -493}, {796, -39}, {-403, 531}, {665, 543},
		 {-51, 71}, {-321, 576}, {-513, -665}, {-510, -38}, {733, 576}, {567, 461}, {46, -985}, {199, -462},
		 {-145, 833}, {888, 908}, {-148, 445}, {-542, -432}, {-277, -735}, {-564, -428}, {-88, 790}, {495, -227},
		 {-794, 83}, {-691, -677}, {-3, 901}, {999, -22}, {2, 408}, {-300, 482}, {-650, -54}, {-425, -875}, {-163, 959},
		 {-609, 123}, {491, 765}, {-126, 253}, {-147, 971}, {-991, 952}, {-917, -928}, {891, -717}, {-232, -173},
		 {231, -335}, {869, -890}, {369, -108}, {708, 874}, {-452, 785}, {921, -333}, {625, -257}, {-490, 666},
		 {-271, 974}, {599, -691}, {634, -731}, {630, 901}, {426, -293}, {229, -753}, {-668, -371}, {311, -928},
		 {569, -154}, {-766, -232}, {847, -457}, {48, 56}, {583, 201}, {-799, -744}, {-119, -967}, {-261, -970},
		 {-100, -379}, {91, -909}, {7, 631}, {-163, -962}, {-979, 144}, {-590, 779}, {30, -453}, {-300, -488},
		 {-360, -960}, {-498, -465}, {-753, 436}, {-193, -494}, {-480, -730}, {130, -77}, {966, 694}, {121, -420},
		 {359, 736}, {-717, 683}, {-786, -619}, {357, -58}, {163, 172}, {960, -153}, {-89, -536}, {-374, -4},
		 {342, -493}, {-631, 350}, {859, 682}, {777, 954}, {-124, 948}, {636, -79}, {-587, 609}, {427, -816},
		 {-856, -672}, {828, 152}, {828, 192}, {-791, 737}, {155, -723}, {-940, 632}, {-460, 22}, {519, -687},
		 {-848, 48}, {535, -168}, {442, 304}, {-267, 436}, {-309, -280}, {160, -63}, {440, 229}, {732, 42}, {592, 531},
		 {347, -494}, {919, -663}, {474, 941}, {88, -405}, {-403, -529}, {988, 342}};
	int expected_result{22679};
	auto result = minimal_costs_to_connect_points<int, std::vector<int>>(input);
	EXPECT_EQ(expected_result, result);
}